// Generated by CoffeeScript 1.6.3
var _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Annotator.Plugin.Share = (function(_super) {
	__extends(Share, _super);

	function Share() {
		this.updateField = __bind(this.updateField, this);
		_ref = Share.__super__.constructor.apply(this, arguments);
		return _ref;
	}

	Share.prototype.field = null;

	Share.prototype.input = null;

	Share.prototype.pluginInit = function() {
		console.log("Share-pluginInit");
		//Check that annotator is working
		if (!Annotator.supported()) {
			return;
		}
		
		//-- Editor
		this.field = this.annotator.editor.addField({
			type: 'input', //options (textarea,input,select,checkbox)
			load: this.updateField,
		});
		
		//Modify the element created with annotator to be an invisible span
		var titleText = '<div class="share-text-annotator">Share without saving:</div>',
			facebook = '<div class="share-facebook-annotator button"></div>',
			twitter = '<div class="share-twitter-annotator button"></div>',
			google = '<div class="share-google-annotator button"></div>',
			email = '<div class="share-email-annotator button"></div>',
			buttons = facebook + twitter + google + email,
			select = '<li class="annotator-item"><div class="share-container-annotator">'+titleText+buttons+'</div></li>',
			newfield = Annotator.$(select);
		Annotator.$(this.field).replaceWith(newfield);
		this.field=newfield[0];
		
		//Create the actions for the buttons
		this.buttonsActions();
		
		//Init the API plugin
		var APIoptions = this.initAPI();
		
		this.runAPI(APIoptions);
		
		//-- Viewer
		/*this.annotator.viewer.addField({
			load: this.updateViewer
		});*/
		
		return this.input = $(this.field).find(':input');
	};
	
	//Create the actions for the buttons
	Share.prototype.buttonsActions = function() {
	//To-Do -> Select the method that is necessary to use
		var share = this;
		$(this.field).find('.share-email-annotator').click(function() {
			var url = share.createAPIURL(2),
				subject = "Sharing a annotation with Open Video Annotation";
				body = encodeURIComponent(url);
			
			window.open('mailto:?subject='+subject+'&body='+body);
		});
		$(this.field).find('.share-facebook-annotator').click(function() {
			var url = share.createAPIURL(2),
				fbURL = 'https://www.facebook.com/sharer/sharer.php?s=100&p[url]='+encodeURIComponent(url)+'&p[title]='+encodeURIComponent('Open Video Annotation')+'&p[summary]='+share.getSource('ovaText');
			
			window.open(fbURL);
		});
		$(this.field).find('.share-twitter-annotator').click(function() {
			var url = share.createAPIURL(2),
				twitterURL = 'https://twitter.com/intent/tweet?original_referer='+encodeURIComponent(url)+'&source=tweetbutton&url='+encodeURIComponent(url)+ "&via=OpenVideoAnnotation&text=" +encodeURIComponent('I want to share the next Open Video Annotation: ');
			window.open(twitterURL);
		});
		$(this.field).find('.share-google-annotator').click(function() {
			var url = share.createAPIURL(2),
				googleURL = 'https://plus.google.com/share?url='+encodeURIComponent(url);
			window.open(googleURL);
		});
	};
	
	
	Share.prototype.createAPIURL = function(method) {
		var annotator = this.annotator,
			editor = annotator.editor,
			method = method || 1,
			url = location.protocol + '//' + location.host + location.pathname;
			
		if (method === 1){
			//to-do
		}else if (method === 2){
			var ovaStart = this.getSource('ovaStart'),
				ovaEnd = this.getSource('ovaEnd'),
				ovaText = this.getSource('ovaText');
			url += '?ovaStart='+ ovaStart
					+'&ovaEnd='+ ovaEnd
					+'&ovaText='+ ovaText;
			if(editor.VideoJS !== -1){//Video Annotation
				var	ovaContainer = this.getSource('ovaContainer'),
					ovaSrc = this.getSource('ovaSrc');
				url += '&ovaContainer='+ovaContainer
					+'&ovaSrc='+ ovaSrc;
			}else{//Text Annotation
				var	ovastartOffset = this.getSource('ovastartOffset'),
					ovaendOffset = this.getSource('ovaendOffset');
				url += '&ovastartOffset='+ovastartOffset
					+'&ovaendOffset='+ ovaendOffset;
			}
		}
		return url;
	};
	
	Share.prototype.getSource = function(source) {
		var annotator = this.annotator,
			editor = annotator.editor,
			textarea = $(editor.element).find('textarea')[0],
			source = source || '';
			
		if(source == 'ovaText')
			source = textarea.value;
		if (editor.VideoJS !== -1){//Video Annotation
			if(source == 'ovaContainer')
				source = editor.VideoJS;
			else if(source == 'ovaSrc')
				source = annotator.mplayer[editor.VideoJS].tag.currentSrc;
			else if(source == 'ovaStart')
				source = annotator.mplayer[editor.VideoJS].rangeslider.getValues().start;
			else if(source == 'ovaEnd')
				source = annotator.mplayer[editor.VideoJS].rangeslider.getValues().end;
		
		}else{//Text Annotation
			var annotation = editor.annotation;
			console.log(editor.annotation);
			if(source == 'ovastartOffset')
				source = annotation.ranges[0].startOffset;
			else if(source == 'ovaendOffset')
				source = annotation.ranges[0].endOffset;
			else if(source == 'ovaStart')
				source = annotation.ranges[0].start;
			else if(source == 'ovaEnd')
				source = annotation.ranges[0].end;
		}
		return encodeURIComponent(source);
	};
	
	Share.prototype.initAPI = function() {
		console.log("initAPI");
		// -- Detect API in the URL -- //
		/*
		The first option is to give a known id of an annotation
		Example http://url.com/#id=rTcpOjIMT2aF1apDtboC-Q
		*/
		var API = {},
			ovaId = this.getParameterByName('ovaId'), //Method 1 (Obligatory)
			start = this.getParameterByName('ovaStart'), //Method 2 (Obligatory)
			end = this.getParameterByName('ovaEnd'), //Method 2 (Obligatory)
			container = this.getParameterByName('ovaContainer'), //Method 2 (Obligatory)
			src = this.getParameterByName('ovaSrc'),//Method 2 (Obligatory)
			text = this.getParameterByName('ovaText'),//Method 2 
			user = this.getParameterByName('ovaUser'),//Method 2 
			startOffset = this.getParameterByName('ovastartOffset'),//Method 2 
			endOffset = this.getParameterByName('ovaendOffset');//Method 2 
		
		// Method 1 API with the Id of the annotation
		if(ovaId != ''){
			$.extend(API,{method:1,ovaId:ovaId});
		}
		//Method 2 API with all the parameter to load the annotation
		//Example with video: http://danielcebrian.com/annotations/demo.html?ovaContainer=vid1&ovaSrc=http%3A%2F%2Fvideo-js.zencoder.com%2Foceans-clip.mp4&ovaStart=2&ovaEnd=10&ovaText=This%20is%20test&ovaUser=Test%20User
		//Example with text: http://danielcebrian.com/annotations/demo.html?ovaStart=%2Fp%5B1%5D&ovaEnd=%2Fp%5B1%5D&ovastartOffset=542&ovaendOffset=572&ovaText=API
	
		if(start!='' && end!='' && container!='' && src!=''){//video api
			$.extend(API,{method:2,start:start,end:end,container:container,src:src,text:text,user:user});
		}else if(start!='' && end!='' && startOffset!='' && endOffset!=''){//text api
			$.extend(API,{method:2,start:start,end:end,startOffset:startOffset,endOffset:endOffset,text:text,user:user});
		}
		return API;
	}
	
	Share.prototype.runAPI = function(API) {
		var self = this;
			
		this.annotator
			//-- Finished the Annotator DOM
			.subscribe("annotationsLoaded", function (annotations){
				console.log("runningAPI");
				var wrapper = $('.annotator-wrapper').parent()[0],
					annotator = window.annotator = $.data(wrapper, 'annotator'),
					mplayer = annotator.mplayer;
				//Detect if the URL has an API element
				if (typeof API!='undefined' && typeof API.method!='undefined' && (API.method=='1'||API.method=='2')) {
					if(API.method=='1'){
						//ToDo
						console.log("method 1" );
					}else if (API.method=='2'){
						if (typeof mplayer!='undefined'){
							console.log("method 2");
							//variable for Video
							var	container = decodeURIComponent(API.container),
								player = mplayer[container],
								isVideo = (typeof player!='undefined' && typeof player!='undefined' && container==player.id_),
								isNumber = (!isNaN(parseFloat(API.start)) && isFinite(API.start) && !isNaN(parseFloat(API.end)) && isFinite(API.end)),
								isSource = false;
								
							if(isVideo){
								//Compare without extension
								var src = decodeURIComponent(API.src),
									targetSrc = src.substring(0,src.lastIndexOf(".")),
									playerSrc = player.tag.src==''?player.tag.currentSrc:player.tag.src;
								playerSrc = playerSrc.substring(0,playerSrc.lastIndexOf("."))
								isSource = (targetSrc == playerSrc);
							}
				
							//Open Video Annotation
							if(isVideo && isNumber && isSource){ 
								var annotation = {
										rangeTime: {
											start:API.start,
											end:API.end
										},
										created: new Date().toISOString(),
										updated: new Date().toISOString(),
										target:{
											container: container,
											src: src
										},
										media: 'video',
										text:decodeURIComponent(API.text),
										user:decodeURIComponent(API.user)
									};
								videojs(player.id_).ready(function(){
									player.preload('auto');
									player.play();
									player.autoPlayAPI = annotation;
								});
							}
							
							//variable for text
							var startOffset = API.startOffset,
								endOffset = API.endOffset;
							
							//Text Annotation
							if(!isVideo && typeof startOffset!='undefined' && typeof endOffset!='undefined'){ 
								var annotation = {
									ranges: [{
										start:decodeURIComponent(API.start),
										end:decodeURIComponent(API.end),
										startOffset:decodeURIComponent(API.startOffset),
										endOffset:decodeURIComponent(API.endOffset),
									}],
									created: new Date().toISOString(),
									updated: new Date().toISOString(),
									media: 'text',
									text:decodeURIComponent(API.text),
									user:decodeURIComponent(API.user)
								};
								//show the annotation
								annotator.setupAnnotation(annotation);
								//to change the color
								$(annotation.highlights).addClass('api'); 
								//animate to the annotation
								$('html,body').animate({
									scrollTop: $(annotation.highlights[0]).offset().top},
									'slow');
							}
						}
					}
				}
			})
	}
	
	Share.prototype.getParameterByName = function(name) {
		name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
		var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
		results = regex.exec(location.search);
		return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
	};

	Share.prototype.updateField = function(field, annotation) {
	};

	/*Share.prototype.updateViewer = function(field, annotation) {
	};*/

	return Share;

})(Annotator.Plugin);

